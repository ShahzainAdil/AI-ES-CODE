import time

# Initialize the board
board = [['' for _ in range(3)] for _ in range(3)]

# Players
AI_PLAYER = 'X'
HUMAN_PLAYER = 'O'
current_turn = HUMAN_PLAYER

# Evaluation counters
basic_minimax_calls = 0
alphabeta_minimax_calls = 0

def display_board():
    print("\nBoard State:")
    for row in board:
        print('| ' + ' | '.join(cell if cell != '' else ' ' for cell in row) + ' |')

def three_in_a_row(a, b, c):
    return a == b == c and a != ''

def find_winner():
    winner = None

    # Check rows
    for row in board:
        if three_in_a_row(row[0], row[1], row[2]):
            winner = row[0]

    # Check columns
    for col in range(3):
        if three_in_a_row(board[0][col], board[1][col], board[2][col]):
            winner = board[0][col]

    # Check diagonals
    if three_in_a_row(board[0][0], board[1][1], board[2][2]):
        winner = board[0][0]
    if three_in_a_row(board[2][0], board[1][1], board[0][2]):
        winner = board[2][0]

    empty_cells = sum(cell == '' for row in board for cell in row)

    if winner is None and empty_cells == 0:
        return 'draw'
    else:
        return winner

def get_available_moves():
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == '']

# --- Standard Minimax ---
def minimax(depth, is_maximizing):
    global basic_minimax_calls
    basic_minimax_calls += 1

    result = find_winner()
    if result is not None:
        if result == AI_PLAYER:
            return 1
        elif result == HUMAN_PLAYER:
            return -1
        elif result == 'draw':
            return 0

    if is_maximizing:
        best_score = -float('inf')
        for (i, j) in get_available_moves():
            board[i][j] = AI_PLAYER
            score = minimax(depth + 1, False)
            board[i][j] = ''
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for (i, j) in get_available_moves():
            board[i][j] = HUMAN_PLAYER
            score = minimax(depth + 1, True)
            board[i][j] = ''
            best_score = min(score, best_score)
        return best_score

# --- Alpha-Beta Pruned Minimax ---
def alphabeta(depth, alpha, beta, is_maximizing):
    global alphabeta_minimax_calls
    alphabeta_minimax_calls += 1

    result = find_winner()
    if result is not None:
        if result == AI_PLAYER:
            return 1
        elif result == HUMAN_PLAYER:
            return -1
        elif result == 'draw':
            return 0

    if is_maximizing:
        max_eval = -float('inf')
        for (i, j) in get_available_moves():
            board[i][j] = AI_PLAYER
            eval = alphabeta(depth + 1, alpha, beta, False)
            board[i][j] = ''
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float('inf')
        for (i, j) in get_available_moves():
            board[i][j] = HUMAN_PLAYER
            eval = alphabeta(depth + 1, alpha, beta, True)
            board[i][j] = ''
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

# --- AI Moves ---

def ai_move_minimax():
    best_score = -float('inf')
    move = None
    for (i, j) in get_available_moves():
        board[i][j] = AI_PLAYER
        score = minimax(0, False)
        board[i][j] = ''
        if score > best_score:
            best_score = score
            move = (i, j)
    if move:
        board[move[0]][move[1]] = AI_PLAYER

def ai_move_alphabeta():
    best_score = -float('inf')
    move = None
    for (i, j) in get_available_moves():
        board[i][j] = AI_PLAYER
        score = alphabeta(0, -float('inf'), float('inf'), False)
        board[i][j] = ''
        if score > best_score:
            best_score = score
            move = (i, j)
    if move:
        board[move[0]][move[1]] = AI_PLAYER

# --- Main Game ---
def play_game(ai_mode='alphabeta'):
    global current_turn, basic_minimax_calls, alphabeta_minimax_calls
    basic_minimax_calls = 0
    alphabeta_minimax_calls = 0
    print(f"Tic Tac Toe: Human (O) vs AI (X) [{ai_mode.upper()} Mode]")
    display_board()

    while True:
        outcome = find_winner()
        if outcome is not None:
            if outcome == 'draw':
                print("It's a draw!")
            else:
                print(f"{outcome} wins the game!")
            break

        if current_turn == HUMAN_PLAYER:
            try:
                move = input("Enter your move (row col): ")
                i, j = map(int, move.strip().split())
                if 0 <= i < 3 and 0 <= j < 3 and board[i][j] == '':
                    board[i][j] = HUMAN_PLAYER
                    current_turn = AI_PLAYER
                else:
                    print("Invalid move.")
            except:
                print("Please enter two numbers separated by space.")
        else:
            print("AI is thinking...")
            if ai_mode == 'minimax':
                ai_move_minimax()
            else:
                ai_move_alphabeta()
            current_turn = HUMAN_PLAYER

        display_board()

    # Report performance
    if ai_mode == 'minimax':
        print(f"Minimax calls: {basic_minimax_calls}")
    else:
        print(f"AlphaBeta calls: {alphabeta_minimax_calls}")

# --- For Comparing Performance ---
def compare_performance():
    global board, current_turn

    # Test Minimax
    board = [['' for _ in range(3)] for _ in range(3)]
    current_turn = AI_PLAYER
    print("\nTesting Basic Minimax...")
    start = time.time()
    ai_move_minimax()
    end = time.time()
    print(f"Minimax move time: {end - start:.5f} seconds")
    print(f"Minimax calls: {basic_minimax_calls}")

    # Test AlphaBeta
    board = [['' for _ in range(3)] for _ in range(3)]
    current_turn = AI_PLAYER
    print("\nTesting AlphaBeta Pruning...")
    start = time.time()
    ai_move_alphabeta()
    end = time.time()
    print(f"AlphaBeta move time: {end - start:.5f} seconds")
    print(f"AlphaBeta calls: {alphabeta_minimax_calls}")

# --- Run the Program ---
if __name__ == "__main__":
    choice = input("Choose mode: 'play' or 'compare': ").strip()
    if choice == 'play':
        mode = input("Choose AI: 'minimax' or 'alphabeta': ").strip()
        play_game(mode)
    elif choice == 'compare':
        compare_performance()
    else:
        print("Invalid choice.")
